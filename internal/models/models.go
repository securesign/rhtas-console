// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package models

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for SignArtifactRequestArtifactType.
const (
	Blob           SignArtifactRequestArtifactType = "blob"
	ContainerImage SignArtifactRequestArtifactType = "container-image"
	File           SignArtifactRequestArtifactType = "file"
	Sbom           SignArtifactRequestArtifactType = "sbom"
)

// Defines values for VerifyArtifactRequestOutput.
const (
	Json VerifyArtifactRequestOutput = "json"
	Text VerifyArtifactRequestOutput = "text"
)

// ArtifactPolicies defines model for ArtifactPolicies.
type ArtifactPolicies struct {
	// Artifact The artifact URI
	Artifact     string `json:"artifact"`
	Attestations []struct {
		// IssuedAt Issuance timestamp
		IssuedAt *time.Time `json:"issuedAt,omitempty"`

		// Issuer Issuer of the attestation
		Issuer *string `json:"issuer,omitempty"`

		// Subject Subject of the attestation
		Subject *string `json:"subject,omitempty"`

		// Type Attestation type
		Type *string `json:"type,omitempty"`
	} `json:"attestations"`
	Policies []struct {
		// LastChecked Last time the policy was checked
		LastChecked *time.Time `json:"lastChecked,omitempty"`

		// Name Policy name
		Name *string `json:"name,omitempty"`

		// Status Policy status
		Status *string `json:"status,omitempty"`
	} `json:"policies"`
}

// Error defines model for Error.
type Error struct {
	// Error Error message
	Error string `json:"error"`
}

// ImageMetadataResponse defines model for ImageMetadataResponse.
type ImageMetadataResponse struct {
	// Digest The container image's digest (e.g., SHA256 hash)
	Digest string `json:"digest"`

	// Image The container image URI
	Image *string `json:"image,omitempty"`

	// Metadata Metadata for a container image
	Metadata Metadata `json:"metadata"`
}

// InclusionProof Merkle tree inclusion proof for a Rekor entry
type InclusionProof struct {
	// Checkpoint Checkpoint string for the log, including tree size and root hash
	Checkpoint string `json:"checkpoint"`

	// Hashes Array of Merkle tree hashes for the inclusion proof
	Hashes []string `json:"hashes"`

	// LogIndex Log index of the entry in the Merkle tree
	LogIndex int64 `json:"logIndex"`

	// RootHash Root hash of the Merkle tree at the time of inclusion
	RootHash string `json:"rootHash"`

	// TreeSize Size of the Merkle tree at the time of inclusion
	TreeSize int64 `json:"treeSize"`
}

// Metadata Metadata for a container image
type Metadata struct {
	// Created Creation timestamp of the container image (if available)
	Created *time.Time `json:"created"`

	// Labels Key-value labels or annotations associated with the container image
	Labels *map[string]string `json:"labels"`

	// MediaType Media type of the container image (e.g., OCI manifest type)
	MediaType string `json:"mediaType"`

	// Size Size of the container image in bytes
	Size int64 `json:"size"`
}

// RekorEntry defines model for RekorEntry.
type RekorEntry struct {
	// Body Base64-encoded entry body
	Body string `json:"body"`

	// IntegratedTime Timestamp of when the entry was integrated
	IntegratedTime int `json:"integratedTime"`

	// LogID Unique identifier of the transparency log
	LogID string `json:"logID"`

	// LogIndex Index in the transparency log
	LogIndex int `json:"logIndex"`

	// Uuid Unique identifier of the Rekor entry
	Uuid string `json:"uuid"`

	// Verification Verification details for a Rekor entry, including inclusion proof and signed timestamp
	Verification Verification `json:"verification"`
}

// RekorPublicKey defines model for RekorPublicKey.
type RekorPublicKey struct {
	// PublicKey Rekor public key in PEM format
	PublicKey string `json:"publicKey"`
}

// RootMetadataInfo defines model for RootMetadataInfo.
type RootMetadataInfo struct {
	// Expires Expiry date of the TUF root metadata
	Expires string `json:"expires"`

	// Status Status of the TUF root metadata
	Status string `json:"status"`

	// Version Version of the TUF root metadata
	Version string `json:"version"`
}

// RootMetadataInfoList defines model for RootMetadataInfoList.
type RootMetadataInfoList struct {
	Data []RootMetadataInfo `json:"data"`
}

// SignArtifactRequest defines model for SignArtifactRequest.
type SignArtifactRequest struct {
	// Annotations Optional key-value annotations to include in the signature
	Annotations *map[string]string `json:"annotations,omitempty"`

	// Artifact URI or identifier of the artifact to sign. This could be a container image (e.g., quay.io/example/app:latest), a file path, a blob digest, or another unique artifact reference.
	Artifact string `json:"artifact"`

	// ArtifactType Type of the artifact to sign. Common types include `container-image`, `file`, `blob`, `sbom`, etc.
	ArtifactType SignArtifactRequestArtifactType `json:"artifactType"`

	// IdentityToken OIDC token for Fulcio (if using keyless signing)
	IdentityToken *string `json:"identityToken"`

	// PrivateKeyRef Reference to a private key (KMS URI or file)
	PrivateKeyRef *string `json:"privateKeyRef"`
}

// SignArtifactRequestArtifactType Type of the artifact to sign. Common types include `container-image`, `file`, `blob`, `sbom`, etc.
type SignArtifactRequestArtifactType string

// SignArtifactResponse defines model for SignArtifactResponse.
type SignArtifactResponse struct {
	// Certificate Fulcio-signed certificate (PEM), if keyless
	Certificate *string `json:"certificate"`

	// LogEntry Rekor transparency log entry
	LogEntry *struct {
		IntegratedTime *int    `json:"integratedTime,omitempty"`
		LogIndex       *int    `json:"logIndex,omitempty"`
		Uuid           *string `json:"uuid,omitempty"`
	} `json:"logEntry,omitempty"`

	// Signature The generated signature
	Signature string `json:"signature"`

	// Success Whether the signing was successful
	Success bool `json:"success"`
}

// TrustConfig defines model for TrustConfig.
type TrustConfig struct {
	FulcioCertAuthorities []struct {
		// Pem Certificate in PEM format
		Pem string `json:"pem"`

		// Subject Certificate authority subject
		Subject string `json:"subject"`
	} `json:"fulcioCertAuthorities"`
}

// Verification Verification details for a Rekor entry, including inclusion proof and signed timestamp
type Verification struct {
	// InclusionProof Merkle tree inclusion proof for a Rekor entry
	InclusionProof InclusionProof `json:"inclusionProof"`

	// SignedEntryTimestamp Base64-encoded signed timestamp for the entry
	SignedEntryTimestamp string `json:"signedEntryTimestamp"`
}

// VerifyArtifactRequest defines model for VerifyArtifactRequest.
type VerifyArtifactRequest struct {
	// Annotations Optional key-value annotations to verify in the signature
	Annotations *map[string]string `json:"annotations,omitempty"`

	// Artifact URI or identifier of the artifact to verify. This could be a container image (e.g., quay.io/example/app:latest), a file path, a blob digest, or another unique artifact reference.
	Artifact string `json:"artifact"`

	// Cert Path or content of certificate for Fulcio-based verification
	Cert *string `json:"cert"`

	// CertChain Certificate chain in PEM format (if using keyless verification)
	CertChain *string `json:"certChain"`

	// CertificateIdentity Expected identity from Fulcio certificate (OIDC subject)
	CertificateIdentity *string `json:"certificateIdentity"`

	// CertificateOidcIssuer OIDC issuer for Fulcio verification
	CertificateOidcIssuer *string `json:"certificateOidcIssuer"`

	// Offline Whether to run Cosign in offline mode
	Offline *bool `json:"offline,omitempty"`

	// Output Output format
	Output *VerifyArtifactRequestOutput `json:"output,omitempty"`

	// PublicKey Optional public key path, KMS URI, or URL (for key-based verification)
	PublicKey *string `json:"publicKey"`
}

// VerifyArtifactRequestOutput Output format
type VerifyArtifactRequestOutput string

// VerifyArtifactResponse defines model for VerifyArtifactResponse.
type VerifyArtifactResponse struct {
	// Details Detailed output from Cosign
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Verification result message
	Message string `json:"message"`

	// Verified Whether verification was successful
	Verified bool `json:"verified"`
}

// GetApiV1ArtifactsImageParams defines parameters for GetApiV1ArtifactsImage.
type GetApiV1ArtifactsImageParams struct {
	Uri string `form:"uri" json:"uri"`
}

// GetApiV1TrustConfigParams defines parameters for GetApiV1TrustConfig.
type GetApiV1TrustConfigParams struct {
	TufRepositoryUrl string `form:"tufRepositoryUrl" json:"tufRepositoryUrl"`
}

// GetApiV1TrustRootMetadataInfoParams defines parameters for GetApiV1TrustRootMetadataInfo.
type GetApiV1TrustRootMetadataInfoParams struct {
	TufRepositoryUrl string `form:"tufRepositoryUrl" json:"tufRepositoryUrl"`
}

// PostApiV1ArtifactsSignJSONRequestBody defines body for PostApiV1ArtifactsSign for application/json ContentType.
type PostApiV1ArtifactsSignJSONRequestBody = SignArtifactRequest

// PostApiV1ArtifactsVerifyJSONRequestBody defines body for PostApiV1ArtifactsVerify for application/json ContentType.
type PostApiV1ArtifactsVerifyJSONRequestBody = VerifyArtifactRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve metadata and digest from an OCI-compliant registry
	// (GET /api/v1/artifacts/image)
	GetApiV1ArtifactsImage(w http.ResponseWriter, r *http.Request, params GetApiV1ArtifactsImageParams)
	// Sign an artifact using Cosign
	// (POST /api/v1/artifacts/sign)
	PostApiV1ArtifactsSign(w http.ResponseWriter, r *http.Request)
	// Verify an artifact using Cosign
	// (POST /api/v1/artifacts/verify)
	PostApiV1ArtifactsVerify(w http.ResponseWriter, r *http.Request)
	// Get policies and attestations for an artifact
	// (GET /api/v1/artifacts/{artifact}/policies)
	GetApiV1ArtifactsArtifactPolicies(w http.ResponseWriter, r *http.Request, artifact string)
	// Retrieve Rekor log entry by UUID
	// (GET /api/v1/rekor/entries/{uuid})
	GetApiV1RekorEntriesUuid(w http.ResponseWriter, r *http.Request, uuid string)
	// Get Rekor public key
	// (GET /api/v1/rekor/public-key)
	GetApiV1RekorPublicKey(w http.ResponseWriter, r *http.Request)
	// Get Fulcio and Rekor metadata from TUF targets
	// (GET /api/v1/trust/config)
	GetApiV1TrustConfig(w http.ResponseWriter, r *http.Request, params GetApiV1TrustConfigParams)
	// Get TUF Root Metadata
	// (GET /api/v1/trust/root-metadata-info)
	GetApiV1TrustRootMetadataInfo(w http.ResponseWriter, r *http.Request, params GetApiV1TrustRootMetadataInfoParams)

	// (GET /healthz)
	GetHealthz(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Retrieve metadata and digest from an OCI-compliant registry
// (GET /api/v1/artifacts/image)
func (_ Unimplemented) GetApiV1ArtifactsImage(w http.ResponseWriter, r *http.Request, params GetApiV1ArtifactsImageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Sign an artifact using Cosign
// (POST /api/v1/artifacts/sign)
func (_ Unimplemented) PostApiV1ArtifactsSign(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Verify an artifact using Cosign
// (POST /api/v1/artifacts/verify)
func (_ Unimplemented) PostApiV1ArtifactsVerify(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get policies and attestations for an artifact
// (GET /api/v1/artifacts/{artifact}/policies)
func (_ Unimplemented) GetApiV1ArtifactsArtifactPolicies(w http.ResponseWriter, r *http.Request, artifact string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve Rekor log entry by UUID
// (GET /api/v1/rekor/entries/{uuid})
func (_ Unimplemented) GetApiV1RekorEntriesUuid(w http.ResponseWriter, r *http.Request, uuid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Rekor public key
// (GET /api/v1/rekor/public-key)
func (_ Unimplemented) GetApiV1RekorPublicKey(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Fulcio and Rekor metadata from TUF targets
// (GET /api/v1/trust/config)
func (_ Unimplemented) GetApiV1TrustConfig(w http.ResponseWriter, r *http.Request, params GetApiV1TrustConfigParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get TUF Root Metadata
// (GET /api/v1/trust/root-metadata-info)
func (_ Unimplemented) GetApiV1TrustRootMetadataInfo(w http.ResponseWriter, r *http.Request, params GetApiV1TrustRootMetadataInfoParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /healthz)
func (_ Unimplemented) GetHealthz(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiV1ArtifactsImage operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ArtifactsImage(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1ArtifactsImageParams

	// ------------- Required query parameter "uri" -------------

	if paramValue := r.URL.Query().Get("uri"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "uri"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "uri", r.URL.Query(), &params.Uri)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uri", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ArtifactsImage(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiV1ArtifactsSign operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1ArtifactsSign(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1ArtifactsSign(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiV1ArtifactsVerify operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1ArtifactsVerify(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1ArtifactsVerify(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1ArtifactsArtifactPolicies operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ArtifactsArtifactPolicies(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "artifact" -------------
	var artifact string

	err = runtime.BindStyledParameterWithOptions("simple", "artifact", chi.URLParam(r, "artifact"), &artifact, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "artifact", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ArtifactsArtifactPolicies(w, r, artifact)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1RekorEntriesUuid operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1RekorEntriesUuid(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", chi.URLParam(r, "uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1RekorEntriesUuid(w, r, uuid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1RekorPublicKey operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1RekorPublicKey(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1RekorPublicKey(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1TrustConfig operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1TrustConfig(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1TrustConfigParams

	// ------------- Required query parameter "tufRepositoryUrl" -------------

	if paramValue := r.URL.Query().Get("tufRepositoryUrl"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "tufRepositoryUrl"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "tufRepositoryUrl", r.URL.Query(), &params.TufRepositoryUrl)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tufRepositoryUrl", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1TrustConfig(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1TrustRootMetadataInfo operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1TrustRootMetadataInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1TrustRootMetadataInfoParams

	// ------------- Required query parameter "tufRepositoryUrl" -------------

	if paramValue := r.URL.Query().Get("tufRepositoryUrl"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "tufRepositoryUrl"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "tufRepositoryUrl", r.URL.Query(), &params.TufRepositoryUrl)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tufRepositoryUrl", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1TrustRootMetadataInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthz(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/artifacts/image", wrapper.GetApiV1ArtifactsImage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/artifacts/sign", wrapper.PostApiV1ArtifactsSign)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/artifacts/verify", wrapper.PostApiV1ArtifactsVerify)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/artifacts/{artifact}/policies", wrapper.GetApiV1ArtifactsArtifactPolicies)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/rekor/entries/{uuid}", wrapper.GetApiV1RekorEntriesUuid)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/rekor/public-key", wrapper.GetApiV1RekorPublicKey)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/trust/config", wrapper.GetApiV1TrustConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/trust/root-metadata-info", wrapper.GetApiV1TrustRootMetadataInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/healthz", wrapper.GetHealthz)
	})

	return r
}
